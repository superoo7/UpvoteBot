{"version":3,"sources":["../src/index.js"],"names":["main","author","permlink","config","maximumPostAge","minimumPostAge","minimumLength","optimumLength","aboutPost","then","data","msg","created","isCheetah","articleLength","checkPostAge","createdTime","beautifyDate","weightage","weightageForPost","time","catch","Promise","resolve","reject","api","getContent","err","result","id","active_votes","filter","voter","length","body","upvote","steem_posting_key","steem_username","broadcast","vote","block_num","isoDate","unixDate","Date","replace","now","postLength","parseInt","fromNow"],"mappings":"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","file":"index.js","sourcesContent":["import steem from 'steem';\nimport moment from 'moment';\n\nimport 'babel-polyfill';\n\nimport { wordParser } from './regex';\n\nfunction main(author, permlink, config) {\n  const {\n    maximumPostAge,\n    minimumPostAge,\n    minimumLength,\n    optimumLength\n  } = config;\n\n  return aboutPost(author, permlink)\n    .then(data => {\n      if (data === 'POST_NOT_FOUND') {\n        return { msg: 'POST_NOT_FOUND' };\n      }\n      const {\n        author,\n        permlink,\n        created,\n        isCheetah,\n        articleLength\n      } = data;\n      if (isCheetah) {\n        return { msg: 'CHEETAH' };\n      } else if (\n        checkPostAge(\n          created,\n          maximumPostAge,\n          minimumPostAge\n        )\n      ) {\n        // 3.5 days or 30 minutes\n        return { msg: 'OLD_POST' };\n      } else {\n        let createdTime = beautifyDate(created);\n        let weightage = weightageForPost(\n          articleLength,\n          minimumLength,\n          optimumLength\n        );\n        return {\n          time: createdTime,\n          weightage,\n          author,\n          permlink,\n          msg: `The post is created ${createdTime} and will be upvoted by ${weightage /\n            100}%`\n        };\n      }\n    })\n    .catch(error => {\n      msg: 'POST_NOT_FOUND';\n    });\n}\n\n// ABOUT THE POST\nfunction aboutPost(author, permlink) {\n  return new Promise(function(resolve, reject) {\n    steem.api.getContent(author, permlink, function(\n      err,\n      result\n    ) {\n      if (\n        err ||\n        (result.id === 0 &&\n          result.author === '' &&\n          result.permlink === '')\n      ) {\n        reject('ERROR');\n      }\n\n      const isCheetah = !(\n        result.active_votes.filter(data => {\n          if (data.voter === 'cheetah') {\n            return true;\n          }\n          return false;\n        }).length === 0\n      );\n\n      const articleLength = wordParser(result.body);\n\n      resolve({\n        author: result.author,\n        permlink,\n        created: result.created,\n        isCheetah,\n        articleLength\n      });\n    });\n  }).catch(err => 'POST_NOT_FOUND');\n}\n\n// UPVOTE\n\nfunction upvote(\n  steem_posting_key,\n  steem_username,\n  author,\n  permlink,\n  weightage\n) {\n  return new Promise(function(resolve, reject) {\n    steem.broadcast.vote(\n      steem_posting_key,\n      steem_username,\n      author,\n      permlink,\n      weightage,\n      function(err, result) {\n        if (err) {\n          reject('ERROR');\n        } else if (!result) {\n          reject('ERROR');\n        } else if (!!result.id && !!result.block_num) {\n          resolve(result);\n        } else {\n          reject('ERROR');\n        }\n      }\n    );\n  }).catch(err => 'ERROR');\n}\n\nfunction checkPostAge(\n  isoDate,\n  maximumPostAge,\n  minimumPostAge\n) {\n  const unixDate = new Date(\n    isoDate\n      .replace(/-/g, '/')\n      .replace('T', ' ')\n      .replace('Z', '')\n  );\n\n  return (\n    Date.now() - unixDate > maximumPostAge ||\n    Date.now() - unixDate < minimumPostAge\n  );\n}\n\nfunction weightageForPost(\n  postLength,\n  minimumLength,\n  optimumLength\n) {\n  if (postLength < minimumLength) {\n    // 10% VP\n    return 10 * 100;\n  } else if (postLength < optimumLength) {\n    // 10% ~ 80% VP\n    return parseInt(\n      (postLength - minimumLength) /\n        (optimumLength - minimumLength) *\n        10 *\n        100 +\n        10 * 100\n    );\n  } else {\n    // 20% VP\n    return 20 * 100;\n  }\n}\n\nfunction beautifyDate(isoDate) {\n  return moment(isoDate).fromNow();\n}\n\nexport {\n  main,\n  aboutPost,\n  upvote,\n  checkPostAge,\n  weightageForPost,\n  beautifyDate\n};\n"]}