{"version":3,"sources":["../src/index.js"],"names":["main","author","permlink","config","maximumPostAge","minimumPostAge","minimumLength","optimumLength","unwantedTags","requiredTags","aboutPost","then","data","msg","console","log","created","isCheetah","isUnwantedTagExist","isRequiredTagNotExist","articleLength","checkPostAge","createdTime","beautifyDate","weightage","weightageForPost","time","catch","Promise","resolve","reject","api","getContent","err","result","id","tags","JSON","parse","json_metadata","filter","includes","tag","length","active_votes","voter","body","upvote","steem_posting_key","steem_username","broadcast","vote","block_num","isoDate","unixDate","Date","replace","now","postLength","parseInt","fromNow"],"mappings":"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","file":"index.js","sourcesContent":["import steem from 'steem';\nimport moment from 'moment';\n\nimport 'babel-polyfill';\n\nimport { wordParser } from './regex';\n\nfunction main(author, permlink, config) {\n  const {\n    maximumPostAge,\n    minimumPostAge,\n    minimumLength,\n    optimumLength,\n    unwantedTags = [],\n    requiredTags = []\n  } = config;\n\n  return aboutPost(\n    author,\n    permlink,\n    unwantedTags,\n    requiredTags\n  )\n    .then(data => {\n      if (data === 'POST_NOT_FOUND') {\n        return { msg: 'POST_NOT_FOUND' };\n      }\n      console.log(data);\n      const {\n        author,\n        permlink,\n        created,\n        isCheetah,\n        isUnwantedTagExist,\n        isRequiredTagNotExist,\n        articleLength\n      } = data;\n      if (isCheetah) {\n        return { msg: 'CHEETAH' };\n      } else if (isUnwantedTagExist) {\n        return { msg: 'UNWANTED_TAGS' };\n      } else if (isRequiredTagNotExist) {\n        return { msg: 'REQUIRED_TAGS' };\n      } else if (\n        checkPostAge(\n          created,\n          maximumPostAge,\n          minimumPostAge\n        )\n      ) {\n        // 3.5 days or 30 minutes\n        return { msg: 'OLD_POST' };\n      } else {\n        let createdTime = beautifyDate(created);\n        let weightage = weightageForPost(\n          articleLength,\n          minimumLength,\n          optimumLength\n        );\n        return {\n          time: createdTime,\n          weightage,\n          author,\n          permlink,\n          msg: `The post is created ${createdTime} and will be upvoted by ${weightage /\n            100}%`\n        };\n      }\n    })\n    .catch(error => {\n      msg: 'POST_NOT_FOUND';\n    });\n}\n\n// ABOUT THE POST\nfunction aboutPost(\n  author,\n  permlink,\n  unwantedTags = [],\n  requiredTags = []\n) {\n  return new Promise(function(resolve, reject) {\n    steem.api.getContent(author, permlink, function(\n      err,\n      result\n    ) {\n      if (\n        err ||\n        (result.id === 0 &&\n          result.author === '' &&\n          result.permlink === '')\n      ) {\n        reject('ERROR');\n      }\n\n      let tags = JSON.parse(result.json_metadata).tags;\n      const isUnwantedTagExist = !(\n        tags.filter(tag => {\n          if (unwantedTags.includes(tag)) {\n            return true;\n          }\n          return false;\n        }).length === 0\n      );\n      console.log(requiredTags);\n      console.log(tags);\n      const isRequiredTagNotExist = !(\n        tags.filter(tag => {\n          if (requiredTags.includes(tag)) {\n            console.log(tag);\n            return true;\n          }\n          return false;\n        }).length === requiredTags.length\n      );\n\n      const isCheetah = !(\n        result.active_votes.filter(data => {\n          if (data.voter === 'cheetah') {\n            return true;\n          }\n          return false;\n        }).length === 0\n      );\n\n      const articleLength = wordParser(result.body);\n\n      resolve({\n        author: result.author,\n        permlink,\n        created: result.created,\n        isCheetah,\n        isUnwantedTagExist,\n        isRequiredTagNotExist,\n        articleLength\n      });\n    });\n  }).catch(err => 'POST_NOT_FOUND');\n}\n\n// UPVOTE\n\nfunction upvote(\n  steem_posting_key,\n  steem_username,\n  author,\n  permlink,\n  weightage\n) {\n  return new Promise(function(resolve, reject) {\n    steem.broadcast.vote(\n      steem_posting_key,\n      steem_username,\n      author,\n      permlink,\n      weightage,\n      function(err, result) {\n        if (err) {\n          reject('ERROR');\n        } else if (!result) {\n          reject('ERROR');\n        } else if (!!result.id && !!result.block_num) {\n          resolve(result);\n        } else {\n          reject('ERROR');\n        }\n      }\n    );\n  }).catch(err => 'ERROR');\n}\n\nfunction checkPostAge(\n  isoDate,\n  maximumPostAge,\n  minimumPostAge\n) {\n  const unixDate = new Date(\n    isoDate\n      .replace(/-/g, '/')\n      .replace('T', ' ')\n      .replace('Z', '')\n  );\n\n  return (\n    Date.now() - unixDate > maximumPostAge ||\n    Date.now() - unixDate < minimumPostAge\n  );\n}\n\nfunction weightageForPost(\n  postLength,\n  minimumLength,\n  optimumLength\n) {\n  if (postLength < minimumLength) {\n    // 10% VP\n    return 10 * 100;\n  } else if (postLength < optimumLength) {\n    // 10% ~ 80% VP\n    return parseInt(\n      (postLength - minimumLength) /\n        (optimumLength - minimumLength) *\n        10 *\n        100 +\n        10 * 100\n    );\n  } else {\n    // 20% VP\n    return 20 * 100;\n  }\n}\n\nfunction beautifyDate(isoDate) {\n  return moment(isoDate).fromNow();\n}\n\nexport {\n  main,\n  aboutPost,\n  upvote,\n  checkPostAge,\n  weightageForPost,\n  beautifyDate\n};\n"]}